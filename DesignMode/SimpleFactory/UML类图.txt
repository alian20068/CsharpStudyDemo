
类图：矩形，分三层
第一层：类的名称。如果是抽象类，则用斜体显示
第二层：类的特性，通常是字段和属性
第三层：类的操作，通常是方法和行为。+表示public，-表示private，#表示protected



接口图：与类图主要区别是，顶端有<<interface>>
第一行：接口名称
第二行：接口方法

另一种表示方式
棒棒糖表示法：圆圈旁边是接口名称，接口方法在实现类中出现



类与类、类与接口之间关系
继承关系：用空心三角形+实线来表示
实现接口：用空心三角形+虚线来表示
关联（association）关系：用实线箭头来表示。当一个类“知道”另一个类时。
聚合（aggregation）关系：用空心的菱形+实线箭头来表示。表示一种弱的“拥有”关系，体现的时A对象可以包含B对象，但B对象不是A对象的一部分【DPE】
合成（composition）关系：用实心的菱形+实线箭头来表示。也翻译成组合关系。表示一种强的“拥有”关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样【DPE】
依赖（dependency）关系：用虚线箭头表示。例如：动物依赖于氧气和水

聚合关系和合成关系连线两端的数字，被称为基数，表明这一端的类可以有几个实例。例如：一只鸟有两只翅膀。如果是无数个，用n表示


C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\ItemTemplates\CSharp\Code\2052\Class\Class.cs
编程是一门技术，更加是一门艺术。
不能只满足写完代码结果正确就完事，时常考虑如何让代码更简练，更易维护，易扩展和复用
只有这样才可以真正得到提高
