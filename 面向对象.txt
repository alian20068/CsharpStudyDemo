面向对象五大原则：

1.单一职责：一个类只负责一个职责。目的在于解耦增强内聚。原文中强调“就一个类而言，应该仅有一个引起它变化的原因”

2.开闭原则：对于扩展是开放的，对于修改是关闭的。允许扩展不允许修改，当底层写好时就不要再修改底层了，修改底层的结果很可能导致其他人的扩展失败，或者扩展方式的变动。一个类只应该因为错误而被修改，而不因为扩展修改。可利用多态、抽象类等实现扩展，超类不应该做改变。能够一直在最开始的版本基础上更新版本出新产品。

3.里氏替换原则：子类必能代替父类。最经典问题，企鹅是鸟，企鹅不会飞，企鹅作为子类但是不能完全代替父类鸟，这就存在问题了，通过接口或抽象类将父类和子类分离，如下图。此时，鸟（高层模块）通过接口写一个飞的方法，企鹅（低层模块）继承于此，但是在详细模块中在写不能飞，于是实现继承但可替换。原文中的话是“由于子类型的可替换性才使得父类类型的模块在无需修改的情况下就可以扩展”。

4.依赖倒转原则：高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象；抽象不应该依赖于具体实现，具体实现应该依赖于抽象。图可用上图加以理解。

5.接口隔离原则：一个类对另一个类的依赖应该建立在最小的接口上，使用多个专门的接口比使用单一的总接口要好。简言之就是，接口功能详尽一些，接口数量可以多一些。

这就是一个程序需要分成什么视图层，逻辑层，数据层等的基本原理，如果有需要修改，修改对应部分即可，一个优秀的程序能够满足五大原则。附带介绍下六大设计模式，除上述5个外：

6.迪米特原则（最小知识原则）：一个对象应当对其他对象有尽可能少的了解。比如，总经理发布任务，部门经理再将任务给你，所传递的信息在于任务，总经理这个对象根本不需要与你有所交集，就不要传递任何信息，甚至说部门经理这个身份信息你都不应该知道，才满足迪米特原则。

其实，无论采用什么设计模式，主要任务在于程序需要很好的复用性、重构性、维护性，当出现问题时，都能很方便的去修改删除增加而不影响基础代码，基础功能，这才是设计的关键所在。



事不过三，三则重构
